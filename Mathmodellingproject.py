# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NN4Zbvsvc0U-UfVtr_jC-0Qb3g3WkKR6
"""

import pandas as pd
import yfinance as yf  # For Yahoo Finance data

# Define the stock symbols for the US and European markets
us_symbol = '^GSPC'  # S&P 500 as a representative of the US market
european_symbol = '^STOXX50E'  # STOXX 50 as a representative of the European market

# Define the time period for historical data (adjust start and end dates as needed)
start_date = '2015-01-01'
end_date = '2023-01-01'

# Download historical data from Yahoo Finance
us_data = yf.download(us_symbol, start=start_date, end=end_date)
european_data = yf.download(european_symbol, start=start_date, end=end_date)

# Display the first few rows of the data
print("US Stock Market Data:")
print(us_data.head())

print("\nEuropean Stock Market Data:")
print(european_data.head())

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta

# Function to simulate stock prices using GBM
def gbm_simulation(stock_data, num_simulations, mu, sigma, initial_price, num_days):
    returns = np.log(1 + stock_data['Adj Close'].pct_change())
    last_price = stock_data['Adj Close'].iloc[-1]

    simulation_df = pd.DataFrame()

    for i in range(num_simulations):
        price_series = [last_price]

        for j in range(num_days):
            price = price_series[-1] * np.exp((mu - 0.5 * sigma**2) + sigma * np.random.normal())
            price_series.append(price)

        simulation_df[f'Simulation_{i+1}'] = price_series

    return simulation_df

# Define the stock symbols for the US and European markets
us_symbol = '^GSPC'  # S&P 500 as a representative of the US market
european_symbol = '^STOXX50E'  # STOXX 50 as a representative of the European market

# Define the time period for historical data (adjust start and end dates as needed)
start_date = '2023-01-01'
end_date = '2024-01-01'

# Download historical data from Yahoo Finance
us_data_1 = yf.download(us_symbol, start=start_date, end=end_date)
european_data_1 = yf.download(european_symbol, start=start_date, end=end_date)

# Parameters for GBM and Monte Carlo Simulation
num_simulations = 10000
mu_us, sigma_us = np.mean(us_data['Adj Close'].pct_change()), np.std(us_data['Adj Close'].pct_change())
mu_european, sigma_european = np.mean(european_data['Adj Close'].pct_change()), np.std(european_data['Adj Close'].pct_change())

# Initial prices for simulation (adjust as needed)
initial_price_us = us_data['Adj Close'].iloc[-1]
initial_price_european = european_data['Adj Close'].iloc[-1]

# Number of days for the simulation
num_days = 360

# Perform simulations
us_simulations = gbm_simulation(us_data, num_simulations, mu_us, sigma_us, initial_price_us, num_days)
european_simulations = gbm_simulation(european_data, num_simulations, mu_european, sigma_european, initial_price_european, num_days)

# Calculate the average of the Monte Carlo simulations
us_simulations['Average'] = us_simulations.mean(axis=1)
european_simulations['Average'] = european_simulations.mean(axis=1)

# Plot True Prices for the US Stock Market
plt.figure(figsize=(12, 6))
plt.plot(us_data_1['Adj Close'].index, us_data_1['Adj Close'], label='True Prices', color='blue')
plt.title('True Prices for US Stock Market')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Plot Monte Carlo Simulation Prices for the US Stock Market
plt.figure(figsize=(12, 6))
plt.plot(us_simulations, color='lightgray', linewidth=0.5)
plt.title('Monte Carlo Simulation Prices for US Stock Market')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.show()

# Plot Average Monte Carlo Simulation Prices for the US Stock Market
plt.figure(figsize=(12, 6))
plt.plot(us_simulations['Average'], color='lightgray', linewidth=2, label='Average Simulation')
plt.title('Average Monte Carlo Simulation Prices for US Stock Market')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Plot True Prices for the European Stock Market
plt.figure(figsize=(12, 6))
plt.plot(european_data_1['Adj Close'].index, european_data_1['Adj Close'], label='True Prices', color='blue')
plt.title('True Prices for European Stock Market')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

# Plot Monte Carlo Simulation Prices for the European Stock Market
plt.figure(figsize=(12, 6))
plt.plot(european_simulations, color='lightgray', linewidth=0.5)
plt.title('Monte Carlo Simulation Prices for European Stock Market')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.show()

# Plot Average Monte Carlo Simulation Prices for the European Stock Market
plt.figure(figsize=(12, 6))
plt.plot(european_simulations['Average'], color='lightgray', linewidth=2, label='Average Simulation')
plt.title('Average Monte Carlo Simulation Prices for European Stock Market')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.legend()
plt.show()